package com.accord.smart_nav_logger.ui.main

import android.graphics.Color
import android.os.Bundle
import android.text.SpannableStringBuilder
import android.text.style.ForegroundColorSpan
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.TextView
import androidx.fragment.app.Fragment
import androidx.lifecycle.Lifecycle
import androidx.lifecycle.Observer
import androidx.lifecycle.ViewModelProvider
import androidx.lifecycle.flowWithLifecycle
import androidx.lifecycle.lifecycleScope
import com.accord.smart_nav_logger.data.LoggingRepository
import com.accord.smart_nav_logger.databinding.FragmentMainBinding
import dagger.hilt.android.AndroidEntryPoint
import kotlinx.coroutines.*
import kotlinx.coroutines.flow.launchIn
import kotlinx.coroutines.flow.onEach
import java.nio.charset.StandardCharsets
import javax.inject.Inject

/**
 * A placeholder fragment containing a simple view.
 */
@AndroidEntryPoint
class LiveFragment : Fragment() {

    private lateinit var pageViewModel: LiveViewModel
    private var _binding: FragmentMainBinding? = null
    private var nmeaFlow: Job? = null
    private var hamsaFlow: Job? = null
    private val USED_COLOR = Color.rgb(0x4a, 0x5f, 0x70)

    @Inject
    lateinit var  repository: LoggingRepository

    // This property is only valid between onCreateView and
    // onDestroyView.
    private val binding get() = _binding!!

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        pageViewModel = ViewModelProvider(this).get(LiveViewModel::class.java).apply {
            setIndex(arguments?.getInt(ARG_SECTION_NUMBER) ?: 1)
        }
    }

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {

        _binding = FragmentMainBinding.inflate(inflater, container, false)
        val root = binding.root


     /* _binding!!.startLog.setOnClickListener(
            View.OnClickListener { _binding!!.logScroll.fullScroll(View.FOCUS_UP) })

        _binding!!.endLog.setOnClickListener(
            View.OnClickListener { _binding!!.logScroll.fullScroll(View.FOCUS_DOWN) })

        _binding!!.clearLog.setOnClickListener(
            View.OnClickListener {_binding!!.logView.setText("") })*/

        val textView: TextView = binding.sectionLabel
        pageViewModel.text.observe(viewLifecycleOwner, Observer {
            //textView.text = it
        })

        observeFlows()
        return root
    }

    @OptIn(ExperimentalCoroutinesApi::class)
    private fun observeFlows() {
        observeNmeaFlow()
        observeHamsaFlow()
    }




    @ExperimentalCoroutinesApi
    private fun observeNmeaFlow() {
        if (nmeaFlow?.isActive == true) {
            // If we're already observing updates, don't register again
            return
        }

        // Observe via Flow as they are generated by the repository
        nmeaFlow = repository.getNmea()
            .flowWithLifecycle(lifecycle, Lifecycle.State.STARTED)
            .onEach {
                GlobalScope.launch(Dispatchers.Unconfined) {
                    val message = String(it, StandardCharsets.ISO_8859_1)
                    //_binding?.logView?.text = message

                    _binding?.sectionLabel?.text  =message
                 /*

                    val builder = SpannableStringBuilder()
                    builder.append(tag).append(" | ").append(message).append("\n")
                    builder.setSpan(
                        ForegroundColorSpan(USED_COLOR),
                        0 *//* start *//*,
                        builder.length,
                        SpannableStringBuilder.SPAN_INCLUSIVE_EXCLUSIVE)

                    _binding?.logView?.append(builder)
*/




                }
            }
            .launchIn(lifecycleScope)
    }

    @ExperimentalCoroutinesApi
    private fun observeHamsaFlow() {
        if (hamsaFlow?.isActive == true) {
            // If we're already observing updates, don't register again
            return
        }
        // Observe via Flow as they are generated by the repository
        hamsaFlow = repository.getHamsa()
            .flowWithLifecycle(lifecycle, Lifecycle.State.STARTED)
            .onEach {
                GlobalScope.launch(Dispatchers.Main) {
                    val message = String(it, StandardCharsets.ISO_8859_1)
                    _binding?.sectionLabel?.text  =message
                }
            }
            .launchIn(lifecycleScope)
    }


    companion object {
        /**
         * The fragment argument representing the section number for this
         * fragment.
         */
        private const val ARG_SECTION_NUMBER = "section_number"

        /**
         * Returns a new instance of this fragment for the given section
         * number.
         */
        @JvmStatic
        fun newInstance(sectionNumber: Int): LiveFragment {
            return LiveFragment().apply {
                arguments = Bundle().apply {
                    putInt(ARG_SECTION_NUMBER, sectionNumber)
                }
            }
        }
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }
}